{"ast":null,"code":"import _slicedToArray from\"/Users/abdulmutaalazhar/Downloads/Quick-Mern-Project-heroku/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import API from\"../../api/api\";import{toast}from\"react-toastify\";import Swal from'sweetalert2';import jwt_decode from\"jwt-decode\";function VerifyEmail(_ref){var history=_ref.history;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),isActive=_useState2[0],setIsActive=_useState2[1];useEffect(function(){//getting jwt token from query params string\nvar query=new URLSearchParams(window.location.search);var uid=query.get('uid');if(uid){try{if(typeof uid==null||typeof uid==undefined){throw new Error(\"Invalid Token\");}var decoded=jwt_decode(uid);API.verifyEmail({userId:decoded.id}).then(function(){setIsActive(false);Swal.fire({title:'Email Verified !',text:'Email Verified Successfully, Login to Continue ! ',icon:'success',confirmButtonText:'Login',confirmButtonColor:'#007bff'}).then(function(){history.push('/login');});}).catch(function(error){Swal.fire({title:'Verification Failed !',text:error.message,icon:'error',confirmButtonText:'OK',confirmButtonColor:'red'}).then(function(){history.push('/login');});});}catch(error){Swal.fire({title:'Verification Failed ! ',text:'Verification Link is Invalid/Expired !',icon:'error',confirmButtonText:'OK',confirmButtonColor:'red'}).then(function(){history.push('/login');});}}},[]);return/*#__PURE__*/React.createElement(\"div\",{className:\"register-form\"},isActive?/*#__PURE__*/React.createElement(\"div\",{className:\"loading-spinner\"},\" \",/*#__PURE__*/React.createElement(\"img\",{width:\"90\",src:\"loading.gif\"}),\"  \"):/*#__PURE__*/React.createElement(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"h3\",null,/*#__PURE__*/React.createElement(\"center\",null,\"Verifying Email . . . . \")),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"br\",null));}export default VerifyEmail;","map":{"version":3,"sources":["/Users/abdulmutaalazhar/Downloads/Quick-Mern-Project-heroku/client/src/components/verifyEmail/verifyEmail.js"],"names":["React","useState","useEffect","API","toast","Swal","jwt_decode","VerifyEmail","history","isActive","setIsActive","query","URLSearchParams","window","location","search","uid","get","undefined","Error","decoded","verifyEmail","userId","id","then","fire","title","text","icon","confirmButtonText","confirmButtonColor","push","catch","error","message"],"mappings":"yLAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAAyBC,SAAzB,KAA0C,OAA1C,CACA,MAAOC,CAAAA,GAAP,KAAgB,eAAhB,CACA,OAASC,KAAT,KAAsB,gBAAtB,CACA,MAAOC,CAAAA,IAAP,KAAiB,aAAjB,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CACA,QAASC,CAAAA,WAAT,MAAkC,IAAXC,CAAAA,OAAW,MAAXA,OAAW,eAECP,QAAQ,CAAC,IAAD,CAFT,wCAEvBQ,QAFuB,eAEdC,WAFc,eAG9BR,SAAS,CAAC,UAAI,CACV;AACA,GAAMS,CAAAA,KAAK,CAAG,GAAIC,CAAAA,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAd,CACA,GAAMC,CAAAA,GAAG,CAAGL,KAAK,CAACM,GAAN,CAAU,KAAV,CAAZ,CACA,GAAGD,GAAH,CAAO,CACH,GAAG,CACC,GAAG,MAAOA,CAAAA,GAAP,EAAc,IAAd,EAAsB,MAAOA,CAAAA,GAAP,EAAaE,SAAtC,CAAgD,CAC5C,KAAM,IAAIC,CAAAA,KAAJ,CAAU,eAAV,CAAN,CACH,CACD,GAAMC,CAAAA,OAAO,CAAGd,UAAU,CAACU,GAAD,CAA1B,CACCb,GAAG,CAACkB,WAAJ,CAAgB,CAACC,MAAM,CAACF,OAAO,CAACG,EAAhB,CAAhB,EAAqCC,IAArC,CAA0C,UAAI,CAC3Cd,WAAW,CAAC,KAAD,CAAX,CACAL,IAAI,CAACoB,IAAL,CAAU,CACNC,KAAK,CAAE,kBADD,CAENC,IAAI,CAAE,mDAFA,CAGNC,IAAI,CAAE,SAHA,CAINC,iBAAiB,CAAE,OAJb,CAKNC,kBAAkB,CAAC,SALb,CAAV,EAMKN,IANL,CAMU,UAAI,CACRhB,OAAO,CAACuB,IAAR,CAAa,QAAb,EACH,CARH,EASF,CAXD,EAYCC,KAZD,CAYO,SAACC,KAAD,CAAS,CACb5B,IAAI,CAACoB,IAAL,CAAU,CACNC,KAAK,CAAE,uBADD,CAENC,IAAI,CAAEM,KAAK,CAACC,OAFN,CAGNN,IAAI,CAAE,OAHA,CAINC,iBAAiB,CAAE,IAJb,CAKNC,kBAAkB,CAAC,KALb,CAAV,EAMKN,IANL,CAMU,UAAI,CACRhB,OAAO,CAACuB,IAAR,CAAa,QAAb,EACH,CARH,EASF,CAtBD,EAuBJ,CACD,MAAME,KAAN,CAAY,CACR5B,IAAI,CAACoB,IAAL,CAAU,CACNC,KAAK,CAAE,wBADD,CAENC,IAAI,CAAE,wCAFA,CAGNC,IAAI,CAAE,OAHA,CAINC,iBAAiB,CAAE,IAJb,CAKNC,kBAAkB,CAAC,KALb,CAAV,EAMKN,IANL,CAMU,UAAI,CACRhB,OAAO,CAACuB,IAAR,CAAa,QAAb,EACH,CARH,EASH,CACJ,CACJ,CA9CQ,CA8CP,EA9CO,CAAT,CA+CA,mBACI,2BAAK,SAAS,CAAC,eAAf,EACOtB,QAAQ,cAAI,2BAAK,SAAS,CAAC,iBAAf,mBAAkC,2BAAK,KAAK,CAAC,IAAX,CAAgB,GAAG,CAAC,aAApB,EAAlC,MAAJ,cAAmF,2BAAK,SAAS,CAAC,iBAAf,EADlG,cAEI,8BAFJ,cAGI,2CAAI,6DAAJ,CAHJ,cAII,8BAJJ,cAKI,8BALJ,CADJ,CASH,CAED,cAAeF,CAAAA,WAAf","sourcesContent":["import React, { useState,useEffect } from 'react';\nimport API from \"../../api/api\";\nimport { toast } from \"react-toastify\";\nimport Swal from 'sweetalert2'\nimport jwt_decode from \"jwt-decode\";\nfunction VerifyEmail({ history }) {\n\n    const [isActive,setIsActive] = useState(true);\n    useEffect(()=>{\n        //getting jwt token from query params string\n        const query = new URLSearchParams(window.location.search);\n        const uid = query.get('uid')\n        if(uid){\n            try{\n                if(typeof uid == null || typeof uid ==undefined){\n                    throw new Error(\"Invalid Token\")\n                }\n                const decoded = jwt_decode(uid);\n                 API.verifyEmail({userId:decoded.id}).then(()=>{\n                    setIsActive(false)\n                    Swal.fire({\n                        title: 'Email Verified !',\n                        text: 'Email Verified Successfully, Login to Continue ! ',\n                        icon: 'success',\n                        confirmButtonText: 'Login',\n                        confirmButtonColor:'#007bff'\n                      }).then(()=>{\n                          history.push('/login')\n                      })\n                 })\n                 .catch((error)=>{\n                    Swal.fire({\n                        title: 'Verification Failed !',\n                        text: error.message ,\n                        icon: 'error',\n                        confirmButtonText: 'OK',\n                        confirmButtonColor:'red'\n                      }).then(()=>{\n                          history.push('/login')\n                      })\n                 })\n            }\n            catch(error){\n                Swal.fire({\n                    title: 'Verification Failed ! ',\n                    text: 'Verification Link is Invalid/Expired !' ,\n                    icon: 'error',\n                    confirmButtonText: 'OK',\n                    confirmButtonColor:'red'\n                  }).then(()=>{\n                      history.push('/login')\n                  })\n            }\n        }\n    },[])\n    return (\n        <div className=\"register-form\">\n              {isActive ?  <div className='loading-spinner'> <img width=\"90\" src=\"loading.gif\"/>  </div>: <div className='loading-spinner'></div>}\n            <br/>\n            <h3><center>Verifying Email . . . . </center></h3>\n            <hr/>\n            <br/>\n        </div>\n    )\n}\n\nexport default VerifyEmail;\n"]},"metadata":{},"sourceType":"module"}